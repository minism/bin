#!/usr/bin/env python

# Copyright 2011 Josh Bothun
# joshbothun@gmail.com

# Creates platform-independent love file
# Creates platform-specific executables if 'win|osx|linux' is passed


import zipfile
import os
import re
import sys

# Settings -- Modify if you need!

if sys.platform.startswith('win'):
    lib_path    = 'C:\Program Files\LOVE\lua'
else:
    lib_path    = '/usr/local/lib/lua/5.1'

out_path    = 'bin'
patterns   = ['\.lua', '\.png']
stdlibs    = ['coroutine', 'debug', 'file', 'io', 'math', 'os', 'package', 'string', 'table']

def build(in_path):
    # Make output dir?
    if not os.path.exists(out_path):
        try:
            os.makedirs(out_path)
            print 'Created directory', out_path
        except OSError, e:
            print e
            sys.exit()

    # Probe conf.lua for NAME/VERSION variables
    version = ''
    name = 'unnamed'
    conf = os.path.join(in_path, 'conf.lua')
    if os.path.exists(conf):
        file = open(conf)
        for line in file:
            match = re.search(r'NAME = (\S+)', line)
            if match:
                name = match.group(1).strip(' "\'')
            match = re.search(r'VERSION = (\S+)', line)
            if match:
                version = '-' + match.group(1).strip(' "\'')
        file.close()

    # Determine name from path + version
    if name:
        zip_name = os.path.join(out_path, name + version + '.love')

    # Bundle local files into zip
    out = zipfile.ZipFile(zip_name, 'w')
    for path, dirs, files in os.walk(in_path):
        for file in files:
            for pattern in patterns:
                if re.search(pattern, file):
                    full = os.path.join(path, file)
                    print 'Adding', full
                    out.write(full, os.path.relpath(full, in_path))

    # Probe main.lua for external libs
    local_files = [ext[0] for ext in map(os.path.splitext, os.listdir(in_path))]
    ext_libs = []
    mainfile = open(os.path.join(in_path, 'main.lua'), 'r')
    pat = re.compile(r'require\s+["\'](\w*)["\']')
    for line in mainfile:
        match = pat.search(line.strip())
        if match:
            # Register as external lib if its not in _stdlibs, or a local
            # lua file in the source directory
            lib = match.group(1)
            if lib not in stdlibs and lib not in local_files:
                ext_libs.append(lib)

    # Bundle external libraries into zip
    for item in os.listdir(lib_path):
        for lib in ext_libs:
            if lib in item:
                path = os.path.join(lib_path, item)
                if os.path.isfile(path):
                    print 'Bundling dependency', path
                    out.write(path, item)
                elif os.path.isdir(path) and os.path.exists(os.path.join(path, 'init.lua')):
                    print 'Bundling dependency', path
                    for subfile in os.listdir(path):
                        if subfile.endswith('.lua'):
                            out.write(os.path.join(path, subfile), os.path.join(item, subfile))
    
    # Close zip
    print 'Created file', zip_name
    out.close()

def main():
    in_path = 'src'
    if len(sys.argv) > 1:
        in_path = sys.argv[1]
    if not os.path.exists(in_path):
        print 'Invalid source directory'
        sys.exit(1)
    if not os.path.exists(os.path.join(in_path, 'main.lua')):
        print 'No main.lua found in source directory', "'" + in_path + "'"
        sys.exit(1)
    build(in_path)

if __name__ == '__main__':
    main()
